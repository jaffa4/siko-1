module Siko.Parser.Token.Kind where

data TokenKind = VarIdentifier
    | TypeIdentifier
    | Equal
    | LParen
    | RParen
    | StringLiteral
    | Dot
    | KeywordModule
    | KeywordWhere
    | KeywordDo
    | KeywordClass
    | EndOfItem
    | EndOfBlock
    deriving (Show, PartialEq, Eq)

module Siko.Parser.Token where

import Siko.Syntax.Location
import Siko.Parser.Token.Kind as Kind

data Token = VarIdentifier String
    | TypeIdentifier String
    | Equal
    | LParen
    | RParen
    | StringLiteral String
    | Dot
    | KeywordModule
    | KeywordWhere
    | KeywordDo
    | KeywordClass
    | EndOfItem
    | EndOfBlock
    deriving (Show)


data TokenInfo = {
        token :: Token,
        span :: Span
    }

instance Show TokenInfo where
    show a = show a.token

getKind :: Token -> Kind.TokenKind
getKind token = case token of
    VarIdentifier _ -> Kind.VarIdentifier
    TypeIdentifier _ -> Kind.TypeIdentifier
    Equal -> Kind.Equal
    LParen -> Kind.LParen
    RParen -> Kind.RParen
    StringLiteral _ -> Kind.StringLiteral
    Dot -> Kind.Dot
    KeywordModule -> Kind.KeywordModule
    KeywordWhere -> Kind.KeywordWhere
    KeywordDo -> Kind.KeywordDo
    KeywordClass -> Kind.KeywordClass
    EndOfItem -> Kind.EndOfItem
    EndOfBlock -> Kind.EndOfBlock
