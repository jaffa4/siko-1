module Siko.Parser where

import Siko.Syntax.Program
import Siko.Syntax.Location
import Siko.Parser.Token
import Siko.Parser.Token.Kind as Kind
import Siko.Parser.Layout
import Siko.Parser.Lexer

data ParserError = GeneralError
                | UnexpectedToken String String Span
                | Context ParserError String
                deriving (Show)

data ParserState =
    {
        tokens :: [TokenInfo],
        index :: Int,
        errors :: [ParserError],
    }

isDone :: ParserState -> Bool
isDone state = state.index >= getLength state.tokens

peek :: ParserState -> TokenInfo
peek state = atIndex state.tokens state.index

step :: ParserState -> ParserState
step state = do
    state { index = state.index + 1 }

addError :: ParserState -> ParserError -> ParserState
addError state error = state { errors = state.errors + [error] }

unexpectedToken :: ParserState -> String -> ParserError
unexpectedToken state expected = do
    ti <- peek state
    found <- show ti.token
    UnexpectedToken expected found ti.span

expect :: ParserState -> Kind.TokenKind -> Result ParserState (ParserState, ParserError)
expect state kind = do
    ti <- peek state
    if getKind ti.token == kind
        then
            Ok (step state)
        else
            Err (state, unexpectedToken state (show kind))

parseModuleName :: ParserState -> (ParserState, String)
parseModuleName state = do
    name <- ""
    loop (state, name) <- (state, "") do
        ti <- peek state
        case ti.token of
            TypeIdentifier id -> do
                name <- name + id
                (step state, name)
            Dot -> do
                name <- name + "."
                (step state, name)
            _ -> break (state, name)


parseExpr :: ParserState -> Result ParserState (ParserState, ParserError)
parseExpr state = do
    ti <- peek state
    case ti.token of
        VarIdentifier id -> do
            println "Calling {}" % id
            Ok (step state)
        _ -> 
            Err (state, unexpectedToken state "expression")

parseFunction :: ParserState -> Result ParserState (ParserState, ParserError)
parseFunction state = do
    ti <- peek state
    case ti.token of
        VarIdentifier id -> do
            println "name of func {}" % id
            state <- step state
            case expect state Kind.Equal of
                Ok state -> case parseExpr state of
                            Ok state ->
                                expect state Kind.EndOfItem
                            Err (state, err) ->
                                Err (state, Context err "Expression as function body")
                Err (state, err) -> Err (state, Context err "in function definition")
        _ -> Err (state, unexpectedToken state "identifier as function name")

parseModule :: ParserState -> Result ParserState (ParserState, ParserError)
parseModule state = do
    state <- case expect state Kind.KeywordModule of
        Ok state -> state
        Err (state, err) -> return Err (state, Context err "keyword module")
    (state, name) <- parseModuleName state
    if name == ""
        then
            return Err (state, unexpectedToken state "<module name>")
        else
        do
            println "module {}" % name
            state <- case expect state Kind.KeywordWhere of
                Ok state -> state
                Err (state, err) -> return Err (state, Context err "where in module definition")
            (state, err) <- loop (state, err) <- (state, None) do
                case parseFunction state of
                    Ok state -> (state, None)
                    Err (state, err) -> break (state, Some err)
            case err of
                None ->
                    expect state Kind.EndOfBlock
                Some err ->
                    Err (state, err)

processTokens :: ParserState -> (Program, [ParserError])
processTokens state = do
    state <- loop state <- state do
        if not (isDone state)
            then
                do
                    case parseModule state of
                        Ok state -> state
                        Err (state, err) -> do
                            state <- addError state err
                            break state
            else
                break state
    (Program [], state.errors)

printErr err = do
            case err of
            GeneralError -> println "General error"
            UnexpectedToken expected found span -> println "Expected {}, found {} at {}" % (expected, found, span)
            Context err msg -> do
                println msg
                printErr err

parse :: String -> Program
parse input = 
    do
        (tokens, errors) <- lex input
        println "Tokens: {}" % tokens
        println "Errors: {}" % errors
        state <- ParserState tokens 0 []
        (program, errors) <- processTokens state
        //println "Errors: {}" % errors
        errors |> List.iter |> forEach \x -> printErr x
        program
