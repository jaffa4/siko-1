module Siko.Parser.Lexer(lex, LexerError(..)) where

import Siko.Syntax.Location
import Siko.Parser.Token
import Siko.Parser.Layout

data LexerError = InvalidEscapeSequence Span
                  | EmptyBlock Span
            deriving (Show)

data LexerState =
    {
        chars :: [Char],
        index :: Int,
        line_offset :: Int,
        line_index :: Int,
        tokens :: [TokenInfo],
        errors :: [LexerError],
    }

emptyState cs = LexerState cs 0 0 0 [] []

isDone :: LexerState -> Bool
isDone state = state.index >= getLength state.chars

peek :: LexerState -> Char
peek state = atIndex state.chars state.index

step :: LexerState -> LexerState
step state = do
    c <- peek state
    (line_offset, line_index) <- if c == '\n'
                    then (0, state.line_index + 1)
                    else (state.line_offset + 1, state.line_index)
    state { index = state.index + 1, line_offset = line_offset, line_index = line_index }

startSpan :: LexerState -> Span
startSpan state = Span (Position state.line_index state.line_offset) (Position state.line_index state.line_offset)

updateSpan :: LexerState -> Span -> Span
updateSpan state span = span { end = (Position state.line_index state.line_offset) }

addToken :: LexerState -> Token -> Span -> LexerState
addToken state token span = do
    state { tokens = state.tokens + [TokenInfo token span] }

addError :: LexerState -> LexerError -> LexerState
addError state error = state { errors = state.errors + [error] }

isIdentifier c = case c of
    'a'..='z' | 'A'..='Z' | '0'..='9' | '_' -> True
    _ -> False

consumeWhile state cond = 
    loop (state, (current, span)) <- (state, ("", startSpan state))
      do
        if not (isDone state)
            then
                do
                    c <- peek state
                    case c of
                        _ if cond c -> do
                            current <- current + "{}" % c
                            span <- updateSpan state span
                            (step state, (current, span))
                        _ -> break (state, (current, span))
            else
                break (state, (current, span))

consumeSingle :: LexerState -> Token -> LexerState
consumeSingle state token = do
    span <- startSpan state
    state <- step state
    addToken state token span

consumeString :: LexerState -> LexerState
consumeString state = do
    state <- step state
    (state, (current, span)) <- loop (state, (current, span)) <- (state, ("", startSpan state))
      do
        if not (isDone state)
            then
                do
                    c <- peek state
                    case c of
                        '"' -> do
                            state <- step state
                            break (state, (current, span))
                        '\\' -> do
                            state <- step state
                            c <- peek state
                            c <- case c of
                                'n' -> Some '\n'
                                't' -> Some '\t'
                                'r' -> Some '\r'
                                '"' -> Some '"'
                                _ -> None
                            (current, state) <- case c of
                                Some c -> do
                                    current <- current + "{}" % c
                                    (current, state)
                                None -> do
                                    span <- startSpan state
                                    state <- addError state (InvalidEscapeSequence span)
                                    (current, state)
                            span <- updateSpan state span
                            (step state, (current, span))
                        _  -> do
                            current <- current + "{}" % c
                            span <- updateSpan state span
                            (step state, (current, span))
            else
                break (state, (current, span))
    addToken state (StringLiteral current) span

consumeIdentifier :: LexerState -> LexerState
consumeIdentifier state = do
    (state, (ident, span)) <- consumeWhile state isIdentifier
    keyword <- case ident of
        "module" -> KeywordModule
        "where" -> KeywordWhere
        "do" -> KeywordDo
        "class" -> KeywordClass
        _ -> if startsWithUppercase ident
                then
                    return addToken state (TypeIdentifier ident) span
                else
                    return addToken state (VarIdentifier ident) span
    addToken state keyword span

lex :: String -> ([TokenInfo], [LexerError])
lex input = 
    do
        cs <- String.chars input
        state <- emptyState cs
        state <- loop state <- state do
         if not (isDone state)
            then
                do
                    c <- peek state
                    state <- case c of
                        _ if isIdentifier c -> consumeIdentifier state
                        '"' -> consumeString state
                        '=' -> consumeSingle state Equal
                        '(' -> consumeSingle state LParen
                        ')' -> consumeSingle state RParen
                        '.' -> consumeSingle state Dot
                        '\n' -> step state
                        _ -> step state
                    state
            else
                break state
        (tokens, errors) <- processLayout state.tokens
        errors <- errors + state.errors
        (tokens, errors)
