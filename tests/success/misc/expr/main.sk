module Main where

import Std.Util

data Value = IntegerValue Int
    | StringValue String.String

data Expr = Integer Int
    | String String.String
    | Sum Expr Expr
    | Mul Expr Expr

toInt :: Value -> Int
toInt v = case v of
    IntegerValue v -> v
    StringValue v -> 0

eval :: Expr -> Value
eval expr = case expr of
    Integer value -> IntegerValue value
    String value -> StringValue value
    Sum lhs rhs -> IntegerValue (toInt (eval lhs) + toInt (eval rhs))
    Mul lhs rhs -> IntegerValue (toInt (eval lhs) * toInt (eval rhs))

main = do
    expr <- Mul (Sum (Integer 4) (Integer 4)) (Integer 2)
    assert ((toInt (eval expr)) == 16)

    